<div class="container py-5">
  <div class="row">
    <div class="col-lg-6 mx-auto">
      <div class="card shadow">
        <div class="card-header bg-white py-3">
          <h2 class="mb-0">Add Payment Method</h2>
        </div>
        
        <div class="card-body">
          <form id="payment-form" class="needs-validation" novalidate>
            <div class="mb-4">
              <label for="card-element" class="form-label">Credit or Debit Card</label>
              <div id="card-element" class="form-control p-3 mb-2">
                <!-- Stripe Elements will be inserted here -->
              </div>
              <div id="card-errors" class="invalid-feedback d-block"></div>
            </div>
            
            <div class="form-check mb-4">
              <input class="form-check-input" type="checkbox" id="make-default" name="make-default" checked>
              <label class="form-check-label" for="make-default">
                Make this my default payment method
              </label>
            </div>
            
            <div class="d-grid gap-2">
              <button id="submit-button" type="submit" class="btn btn-primary">
                Add Payment Method
              </button>
              <%= link_to "Cancel", billing_subscriptions_path, class: "btn btn-outline-secondary" %>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
  document.addEventListener('turbo:load', function() {
    // Initialize Stripe
    const stripe = Stripe('<%= Rails.application.credentials.dig(:stripe, :test, :public_key) %>');
    const elements = stripe.elements();
    
    // Create card element
    const cardElement = elements.create('card');
    cardElement.mount('#card-element');
    
    // Handle form submission
    const form = document.getElementById('payment-form');
    const submitButton = document.getElementById('submit-button');
    const cardErrors = document.getElementById('card-errors');
    
    form.addEventListener('submit', async (event) => {
      event.preventDefault();
      
      // Disable the submit button to prevent repeated clicks
      submitButton.disabled = true;
      submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
      
      const makeDefault = document.getElementById('make-default').checked;
      
      try {
        const result = await stripe.confirmCardSetup('<%= @client_secret %>', {
          payment_method: {
            card: cardElement,
            billing_details: {
              name: '<%= current_user.billing_name || current_user.name || current_user.email %>',
              email: '<%= current_user.billing_email || current_user.email %>'
            }
          }
        });
        
        if (result.error) {
          // Show error to customer
          cardErrors.textContent = result.error.message;
          submitButton.disabled = false;
          submitButton.innerHTML = 'Add Payment Method';
        } else {
          // The setup has succeeded. Send the payment method ID to your server
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = '<%= payment_methods_path %>';
          
          const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
          const csrfInput = document.createElement('input');
          csrfInput.type = 'hidden';
          csrfInput.name = 'authenticity_token';
          csrfInput.value = csrfToken;
          form.appendChild(csrfInput);
          
          const paymentMethodInput = document.createElement('input');
          paymentMethodInput.type = 'hidden';
          paymentMethodInput.name = 'payment_method_id';
          paymentMethodInput.value = result.setupIntent.payment_method;
          form.appendChild(paymentMethodInput);
          
          const defaultInput = document.createElement('input');
          defaultInput.type = 'hidden';
          defaultInput.name = 'default';
          defaultInput.value = makeDefault;
          form.appendChild(defaultInput);
          
          document.body.appendChild(form);
          form.submit();
        }
      } catch (error) {
        console.error('Error:', error);
        cardErrors.textContent = 'An unexpected error occurred. Please try again.';
        submitButton.disabled = false;
        submitButton.innerHTML = 'Add Payment Method';
      }
    });
    
    // Handle real-time validation errors from the card Element
    cardElement.addEventListener('change', (event) => {
      if (event.error) {
        cardErrors.textContent = event.error.message;
      } else {
        cardErrors.textContent = '';
      }
    });
  });
</script> 